name: CI/CD Pipeline

env:
  BACKEND_HOST: localhost
  BACKEND_PORT: 1234

on:
  push:
    branches: [main, ci/cd]
  pull_request:
    branches: ["*"]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v6
      with:
        go-version: v1.24.0
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64.7
        args: --disable-all --enable=govet --enable=errcheck --enable=staticcheck --enable=gofmt --enable=typecheck --timeout=5m
        working-directory: ./backend

    - name: Run tests
      run: go test -v

    - name: Build application
      run: go build -o app .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: go-backend
        path: ./backend/app

  backend-health-check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    needs: test-backend

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: go-backend
          path: ./backend

      - name: Make binary executable
        run: chmod +x app

      - name: Start application
        run: |
          ./app --host=$BACKEND_HOST --port=$BACKEND_PORT &
          echo $! > app.pid
          sleep 3

      - name: Test health endpoint
        run: |
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://$BACKEND_HOST:$BACKEND_PORT/health)
          
          if [ "$status_code" -ne 200 ]; then
            echo "Health check failed: HTTP $status_code"
            exit 1
          fi

      - name: Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) 2>/dev/null || true
            rm -f app.pid
          fi

  test-auth-service:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Golang
      uses: actions/setup-go@v6
      with:
        go-version: v1.24.0
        cache: true

    - name: Run tests
      run: go test -v

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    needs: test-auth-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: npm install

    - name: Build frontend
      run: npm run dev
