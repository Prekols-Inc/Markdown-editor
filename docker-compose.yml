services:
  db:
    image: postgres:18-alpine
    container_name: markdown-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    image: sid00r/markdown-backend:latest
    build: ./backend
    container_name: markdown-backend
    environment:
      - BACKEND_HOST=${BACKEND_HOST}
      - BACKEND_PORT=${BACKEND_PORT}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - markdown-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c 'echo > /dev/tcp/localhost/${BACKEND_PORT}' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s
      
  auth:
    image: sid00r/markdown-auth:latest
    build: ./auth
    container_name: markdown-auth
    environment:
      - AUTH_HOST=${AUTH_HOST}
      - AUTH_PORT=${AUTH_PORT}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    networks:
      - markdown-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c 'echo > /dev/tcp/localhost/${AUTH_PORT}' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  frontend:
    image: sid00r/markdown-frontend:latest
    build: ./frontend
    container_name: markdown-frontend
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - VITE_STORAGE_API_BASE_URL=${VITE_STORAGE_API_BASE_URL}
      - VITE_AUTH_API_BASE_URL=${VITE_AUTH_API_BASE_URL}
    ports: 
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
      - auth
    networks:
      - markdown-network
    restart: unless-stopped

networks:
  markdown-network:
    driver: bridge
